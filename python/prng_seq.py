from utility import *
from Crypto.Cipher import AES

list = [
    4292994350, 1536389295, 4042431367, 3384302645, 2035141728, 3694012268, 2800106660, 387169270, 1931368155, 2313027219, 2401988609, 4009711196, 2511867215, 2141921935, 3691424850, 3583068679, 55981814, 3366258802, 2870675337, 1384398332, 2374224221, 1109324721, 3252986718, 259642665, 4065436664, 3169491215, 684847233, 1967950918, 1761103132, 2789617314, 2082902972, 588732123, 323601286, 2343264793, 2766261905, 3585151325, 1894204746, 3632833394, 1940040064, 1146207988, 3511993505, 685735866, 2858571120, 1874842012, 824884701, 3756573615, 2506023712, 4100053623, 2943458514, 820854338, 3100538591, 1990141088, 1731949124, 1334992291, 2646157195, 3375289919, 3700673110, 2540372588, 1239758838, 3045145299, 4070309820, 3231542850, 1308607425,
    1320625912, 4292994350, 1536389295, 4042431367, 3384302645, 2035141728, 3694012268, 2800106660, 387169270, 1931368155, 2313027219, 2401988609, 4009711196, 2511867215, 2141921935, 3691424850, 3583068679, 55981814, 3366258802, 2870675337, 1384398332, 2374224221, 1109324721, 3252986718, 259642665, 4065436664, 3169491215, 684847233, 1967950918, 1761103132, 2789617314, 2082902972, 588732123, 323601286, 2343264793, 2766261905, 3585151325, 1894204746, 3632833394, 1940040064, 1146207988, 3511993505, 685735866, 2858571120, 1874842012, 824884701, 3756573615, 2506023712, 4100053623, 2943458514, 820854338, 3100538591, 1990141088, 1731949124, 1334992291, 2646157195, 3375289919, 3700673110, 2540372588, 1239758838, 3045145299, 4070309820, 3231542850]


def to_binary(n):
    assert n >= 0
    res = ''
    if(n == 0):
        return '0'
    while n > 0:
        if n % 2 == 0:
            res = '0' + res
        else:
            res = '1' + res
        n = n / 2
    return res


def pad_left(str, pad_char, length):
    if(not len(str) < length):
        return str
    return pad_char * (length - len(str)) + str


list_bin = [pad_left(to_binary(n), '0', 32) for n in list]
list_len = [len(x) for x in list_bin]


def bits_to_char(b):
    assert len(b) == 8
    value = 0
    for e in b:
        value = (value * 2) + e
    return chr(value)


def list_to_string(p):
    return ''.join(p)


def bits_to_string(b):
    return ''.join([bits_to_char(b[i:i + 8])
                    for i in range(0, len(b), 8)])

def string_to_bits(s):
    def chr_to_bit(c):
        return pad_bits(convert_to_bits(ord(c)), ASCII_BITS)
    return [b for group in 
            map(chr_to_bit, s)
            for b in group]

ASCII_BITS = 8

key = bits_to_string([0] * 16 * 8)

ecb = AES.new(key, AES.MODE_ECB)
print string_to_bits(ecb.encrypt(list_bin[0]))
print list_bin[1]